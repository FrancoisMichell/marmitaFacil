# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  [push]

jobs:
  build:

    runs-on: ubuntu-latest
    services:
      # Etiqueta usada para acessar o contêiner de serviço
      postgres:
        # Imagem do Docker Hub
        image: postgres
        # Fornece a senha para postgres
        env:
          POSTGRES_DB: marmitaTest
          POSTGRES_USER: root
          POSTGRES_PASSWORD: 123456
        ports:
          # Mapeia a porta port 5432 tcp no contêiner de serviço com o host
        - 5432:5432
        # Define verificações gerais até a inicialização do postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [12.x, 13.x, 14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
      env:
        APP_KEY: 06bUs628UukAIZJoAoeIu8Dux0xLBl4O
        ENV_SILENT: 'true'
        HOST: localhost
        PORT: 4000
        NODE_ENV: testing
        DATABASE_CONNECTION: pg
        DATABASE_HOST: postgres
        DATABASE_PORT: 5432
        DATABASE_USER: root
        DATABASE_PASSWORD: 123456
        DATABASE_DATABASE: marmitaTest
        DATABASE_URL: postgres://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}
        DATABASE_DEBUG: "false"
        HASH_DRIVER: bcrypt
